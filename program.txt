Authors : Cobi Nguyen
	  Zackery Wiegand


Snake in Scratch

Our program will implement a basic version of snake. We will
 start with a barebones snake game but if we have time may add more 
 quirky features. That is to be determined.

With scratch you have to implement code for each sprite, or object that exists in the game.
So with a snake game we need:
 fruit/food : this will have a two blocks of code, one to increment score and snake size when
              eaten, and another to randomly spawn a new fruit somewhere in the map.
 
 boundries : We plan to implement boundry objects that end the game of the play collides with them.
             We don't know yet if Scratch has a function that can tell if a sprite is out of frame, 
             but we can implment this ourselves with 4 wall/boundary sprites. This code will be minimal, 1 block.

 snake : This object will take the most code. We will had 4 small blocks that allow the player to
         control the snake. The trickiest part will be to increment the size of the snake, and then
         have the game end when the snake's head collides with its body. These two problems will be tackled
         separtely.
         
Estimated blocks of code ~ 13 blocks of code, some of these blocks will be 3 lines long, some more than 10,
 we will take advantage of Scratches 'broadcast' function to break the bigger blocks up.

This program will be a good illustration of the features of our language because it is complex enough for us to
really explore what else Scratch has we haven't used in milestones yet. What we have used thusfar is 'broadcase' 
which basically enables block/function calls, and cloning. When creating the snake body, we will use cloning to 
'infintely' create body segments. 

Cloning is really the coolest thing we've found from scratch so far, a simple snake game will enable us to play with
this characteristic more!